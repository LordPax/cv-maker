name: Hello World

on:
  push:
    paths-ignore:
      - '**.pdf'
      - '**.mhtml'

env:
  NAME: test
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - run: echo "Salut ${{ env.NAME }}"

      # - name: Setup Bun
      #   uses: oven-sh/setup-bun@v1
      #   with:
      #     bun-version: latest

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Run the server
        run: |
          pnpm run preview &
          sleep 5

      - name: Test with curl
        run: |
          curl -I http://localhost:4173

  snapshot:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Pull image in background
        run: docker pull ghcr.io/puppeteer/puppeteer:latest &

      - name: Checkout
        uses: actions/checkout@v4

      - run: echo "Salut ${{ env.NAME }}"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      - name: Run the server
        run: |
          pnpm run preview &
          sleep 5

      - name: Test with curl
        run: |
          curl -I http://localhost:4173

      - name: Make the snapshot
        run: |
          mkdir -m 777 gen
          docker run -i --init --cap-add=SYS_ADMIN -v ./gen:/home/pptruser/gen --network host ghcr.io/puppeteer/puppeteer:latest node -e "$(cat snapshot.js)" http://localhost:4173 ./gen
          mv gen/* static/
          sed -i 's%http://localhost:4173%https://cv-maker-pearl.vercel.app%g' static/*.pdf

      - name: Git config
        run: |
          git config user.name "CI Bot"
          git config user.email "${GITHUB_ACTOR}@user.noreplay.github.com"

      - name: Push to git
        run: |
          git add static
          git commit -m "update snapshot ${{ github.sha }}"
          git push

  deploy:
    runs-on: ubuntu-latest
    needs: snapshot
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - run: echo "Salut ${{ env.NAME }}"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2.4.0
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          
      # - name: Netlify deploy
      #   uses: jsmrcaga/action-netlify-deploy@v2.0.0
      #   with:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.TOKEN_SECRET }}
      #     NETLIFY_DEPLOY_TO_PROD: true
      #     install_command: pnpm install
      #     build_command: pnpm run build
